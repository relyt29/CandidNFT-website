{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "link",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "blockhashStore",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "linkEthFeed",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "internalBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "externalBalance",
						"type": "uint256"
					}
				],
				"name": "BalanceInvariantViolated",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "blockNum",
						"type": "uint256"
					}
				],
				"name": "BlockhashNotInStore",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "have",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "want",
						"type": "uint32"
					}
				],
				"name": "GasLimitTooBig",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "IncorrectCommitment",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "have",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "want",
						"type": "uint256"
					}
				],
				"name": "InsufficientGasForConsumer",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidCalldata",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					},
					{
						"internalType": "address",
						"name": "consumer",
						"type": "address"
					}
				],
				"name": "InvalidConsumer",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "int256",
						"name": "linkWei",
						"type": "int256"
					}
				],
				"name": "InvalidLinkWeiPrice",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "have",
						"type": "uint16"
					},
					{
						"internalType": "uint16",
						"name": "min",
						"type": "uint16"
					},
					{
						"internalType": "uint16",
						"name": "max",
						"type": "uint16"
					}
				],
				"name": "InvalidRequestConfirmations",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidSubscription",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "proposedOwner",
						"type": "address"
					}
				],
				"name": "MustBeRequestedOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "MustBeSubOwner",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NoCorrespondingRequest",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "keyHash",
						"type": "bytes32"
					}
				],
				"name": "NoSuchProvingKey",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "have",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "want",
						"type": "uint32"
					}
				],
				"name": "NumWordsTooBig",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OnlyCallableFromLink",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "PaymentTooLarge",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "PendingRequestExists",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "keyHash",
						"type": "bytes32"
					}
				],
				"name": "ProvingKeyAlreadyRegistered",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Reentrant",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TooManyConsumers",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint16",
						"name": "minimumRequestConfirmations",
						"type": "uint16"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "maxGasLimit",
						"type": "uint32"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "stalenessSeconds",
						"type": "uint32"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "gasAfterPaymentCalculation",
						"type": "uint32"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "fallbackWeiPerUnitLink",
						"type": "int256"
					},
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "fulfillmentFlatFeeLinkPPMTier1",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "fulfillmentFlatFeeLinkPPMTier2",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "fulfillmentFlatFeeLinkPPMTier3",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "fulfillmentFlatFeeLinkPPMTier4",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "fulfillmentFlatFeeLinkPPMTier5",
								"type": "uint32"
							},
							{
								"internalType": "uint24",
								"name": "reqsForTier2",
								"type": "uint24"
							},
							{
								"internalType": "uint24",
								"name": "reqsForTier3",
								"type": "uint24"
							},
							{
								"internalType": "uint24",
								"name": "reqsForTier4",
								"type": "uint24"
							},
							{
								"internalType": "uint24",
								"name": "reqsForTier5",
								"type": "uint24"
							}
						],
						"indexed": false,
						"internalType": "struct VRFCoordinatorV2.FeeConfig",
						"name": "feeConfig",
						"type": "tuple"
					}
				],
				"name": "ConfigSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "FundsRecovered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "keyHash",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "oracle",
						"type": "address"
					}
				],
				"name": "ProvingKeyDeregistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "keyHash",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "oracle",
						"type": "address"
					}
				],
				"name": "ProvingKeyRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "outputSeed",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint96",
						"name": "payment",
						"type": "uint96"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					}
				],
				"name": "RandomWordsFulfilled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "keyHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "preSeed",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "uint16",
						"name": "minimumRequestConfirmations",
						"type": "uint16"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "callbackGasLimit",
						"type": "uint32"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "numWords",
						"type": "uint32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RandomWordsRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "SubscriptionCanceled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "consumer",
						"type": "address"
					}
				],
				"name": "SubscriptionConsumerAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "consumer",
						"type": "address"
					}
				],
				"name": "SubscriptionConsumerRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "SubscriptionCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldBalance",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newBalance",
						"type": "uint256"
					}
				],
				"name": "SubscriptionFunded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "SubscriptionOwnerTransferRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "SubscriptionOwnerTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "BLOCKHASH_STORE",
				"outputs": [
					{
						"internalType": "contract BlockhashStoreInterface",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "LINK",
				"outputs": [
					{
						"internalType": "contract LinkTokenInterface",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "LINK_ETH_FEED",
				"outputs": [
					{
						"internalType": "contract AggregatorV3Interface",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MAX_CONSUMERS",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MAX_NUM_WORDS",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MAX_REQUEST_CONFIRMATIONS",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					}
				],
				"name": "acceptSubscriptionOwnerTransfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					},
					{
						"internalType": "address",
						"name": "consumer",
						"type": "address"
					}
				],
				"name": "addConsumer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "cancelSubscription",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "createSubscription",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[2]",
						"name": "publicProvingKey",
						"type": "uint256[2]"
					}
				],
				"name": "deregisterProvingKey",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256[2]",
								"name": "pk",
								"type": "uint256[2]"
							},
							{
								"internalType": "uint256[2]",
								"name": "gamma",
								"type": "uint256[2]"
							},
							{
								"internalType": "uint256",
								"name": "c",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "s",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "seed",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "uWitness",
								"type": "address"
							},
							{
								"internalType": "uint256[2]",
								"name": "cGammaWitness",
								"type": "uint256[2]"
							},
							{
								"internalType": "uint256[2]",
								"name": "sHashWitness",
								"type": "uint256[2]"
							},
							{
								"internalType": "uint256",
								"name": "zInv",
								"type": "uint256"
							}
						],
						"internalType": "struct VRF.Proof",
						"name": "proof",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "blockNum",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "subId",
								"type": "uint64"
							},
							{
								"internalType": "uint32",
								"name": "callbackGasLimit",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "numWords",
								"type": "uint32"
							},
							{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}
						],
						"internalType": "struct VRFCoordinatorV2.RequestCommitment",
						"name": "rc",
						"type": "tuple"
					}
				],
				"name": "fulfillRandomWords",
				"outputs": [
					{
						"internalType": "uint96",
						"name": "",
						"type": "uint96"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					}
				],
				"name": "getCommitment",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getConfig",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "minimumRequestConfirmations",
						"type": "uint16"
					},
					{
						"internalType": "uint32",
						"name": "maxGasLimit",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "stalenessSeconds",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "gasAfterPaymentCalculation",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getCurrentSubId",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getFallbackWeiPerUnitLink",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getFeeConfig",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "fulfillmentFlatFeeLinkPPMTier1",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "fulfillmentFlatFeeLinkPPMTier2",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "fulfillmentFlatFeeLinkPPMTier3",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "fulfillmentFlatFeeLinkPPMTier4",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "fulfillmentFlatFeeLinkPPMTier5",
						"type": "uint32"
					},
					{
						"internalType": "uint24",
						"name": "reqsForTier2",
						"type": "uint24"
					},
					{
						"internalType": "uint24",
						"name": "reqsForTier3",
						"type": "uint24"
					},
					{
						"internalType": "uint24",
						"name": "reqsForTier4",
						"type": "uint24"
					},
					{
						"internalType": "uint24",
						"name": "reqsForTier5",
						"type": "uint24"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "reqCount",
						"type": "uint64"
					}
				],
				"name": "getFeeTier",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRequestConfig",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					},
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					},
					{
						"internalType": "bytes32[]",
						"name": "",
						"type": "bytes32[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					}
				],
				"name": "getSubscription",
				"outputs": [
					{
						"internalType": "uint96",
						"name": "balance",
						"type": "uint96"
					},
					{
						"internalType": "uint64",
						"name": "reqCount",
						"type": "uint64"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "consumers",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTotalBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[2]",
						"name": "publicKey",
						"type": "uint256[2]"
					}
				],
				"name": "hashOfKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "onTokenTransfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint96",
						"name": "amount",
						"type": "uint96"
					}
				],
				"name": "oracleWithdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					}
				],
				"name": "ownerCancelSubscription",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					}
				],
				"name": "pendingRequestExists",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "recoverFunds",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "oracle",
						"type": "address"
					},
					{
						"internalType": "uint256[2]",
						"name": "publicProvingKey",
						"type": "uint256[2]"
					}
				],
				"name": "registerProvingKey",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					},
					{
						"internalType": "address",
						"name": "consumer",
						"type": "address"
					}
				],
				"name": "removeConsumer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "keyHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					},
					{
						"internalType": "uint16",
						"name": "requestConfirmations",
						"type": "uint16"
					},
					{
						"internalType": "uint32",
						"name": "callbackGasLimit",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "numWords",
						"type": "uint32"
					}
				],
				"name": "requestRandomWords",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "subId",
						"type": "uint64"
					},
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "requestSubscriptionOwnerTransfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "minimumRequestConfirmations",
						"type": "uint16"
					},
					{
						"internalType": "uint32",
						"name": "maxGasLimit",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "stalenessSeconds",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "gasAfterPaymentCalculation",
						"type": "uint32"
					},
					{
						"internalType": "int256",
						"name": "fallbackWeiPerUnitLink",
						"type": "int256"
					},
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "fulfillmentFlatFeeLinkPPMTier1",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "fulfillmentFlatFeeLinkPPMTier2",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "fulfillmentFlatFeeLinkPPMTier3",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "fulfillmentFlatFeeLinkPPMTier4",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "fulfillmentFlatFeeLinkPPMTier5",
								"type": "uint32"
							},
							{
								"internalType": "uint24",
								"name": "reqsForTier2",
								"type": "uint24"
							},
							{
								"internalType": "uint24",
								"name": "reqsForTier3",
								"type": "uint24"
							},
							{
								"internalType": "uint24",
								"name": "reqsForTier4",
								"type": "uint24"
							},
							{
								"internalType": "uint24",
								"name": "reqsForTier5",
								"type": "uint24"
							}
						],
						"internalType": "struct VRFCoordinatorV2.FeeConfig",
						"name": "feeConfig",
						"type": "tuple"
					}
				],
				"name": "setConfig",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "typeAndVersion",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"acceptSubscriptionOwnerTransfer(uint64)": {
					"details": "will revert if original owner of subId has not requested that msg.sender become the new owner.",
					"params": {
						"subId": "- ID of the subscription"
					}
				},
				"addConsumer(uint64,address)": {
					"params": {
						"consumer": "- New consumer which can use the subscription",
						"subId": "- ID of the subscription"
					}
				},
				"cancelSubscription(uint64,address)": {
					"params": {
						"subId": "- ID of the subscription",
						"to": "- Where to send the remaining LINK to"
					}
				},
				"createSubscription()": {
					"details": "You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));",
					"returns": {
						"_0": "- A unique subscription id."
					}
				},
				"deregisterProvingKey(uint256[2])": {
					"params": {
						"publicProvingKey": "key that oracle can use to submit vrf fulfillments"
					}
				},
				"getCommitment(uint256)": {
					"details": "used to determine if a request is fulfilled or not",
					"params": {
						"requestId": "id of request"
					}
				},
				"getRequestConfig()": {
					"returns": {
						"_0": "minimumRequestConfirmations global min for request confirmations",
						"_1": "maxGasLimit global max for request gas limit",
						"_2": "s_provingKeyHashes list of registered key hashes"
					}
				},
				"getSubscription(uint64)": {
					"params": {
						"subId": "- ID of the subscription"
					},
					"returns": {
						"balance": "- LINK balance of the subscription in juels.",
						"consumers": "- list of consumer address which are able to use this subscription.",
						"owner": "- owner of the subscription.",
						"reqCount": "- number of requests for this subscription, determines fee tier."
					}
				},
				"hashOfKey(uint256[2])": {
					"params": {
						"publicKey": "the key to return the hash of"
					}
				},
				"ownerCancelSubscription(uint64)": {
					"details": "notably can be called even if there are pending requests, outstanding ones may fail onchain",
					"params": {
						"subId": "subscription id"
					}
				},
				"recoverFunds(address)": {
					"params": {
						"to": "address to send link to"
					}
				},
				"registerProvingKey(address,uint256[2])": {
					"params": {
						"oracle": "address of the oracle",
						"publicProvingKey": "key that oracle can use to submit vrf fulfillments"
					}
				},
				"removeConsumer(uint64,address)": {
					"params": {
						"consumer": "- Consumer to remove from the subscription",
						"subId": "- ID of the subscription"
					}
				},
				"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)": {
					"params": {
						"callbackGasLimit": "- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]",
						"keyHash": "- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.",
						"minimumRequestConfirmations": "- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].",
						"numWords": "- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.",
						"subId": "- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash."
					},
					"returns": {
						"_0": "- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."
					}
				},
				"requestSubscriptionOwnerTransfer(uint64,address)": {
					"params": {
						"newOwner": "- proposed new owner of the subscription",
						"subId": "- ID of the subscription"
					}
				},
				"setConfig(uint16,uint32,uint32,uint32,int256,(uint32,uint32,uint32,uint32,uint32,uint24,uint24,uint24,uint24))": {
					"params": {
						"fallbackWeiPerUnitLink": "fallback eth/link price in the case of a stale feed",
						"feeConfig": "fee tier configuration",
						"gasAfterPaymentCalculation": "gas used in doing accounting after completing the gas measurement",
						"maxGasLimit": "global max for request gas limit",
						"minimumRequestConfirmations": "global min for request confirmations",
						"stalenessSeconds": "if the eth/link feed is more stale then this, use the fallback price"
					}
				},
				"typeAndVersion()": {
					"returns": {
						"_0": "Type and version string"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"acceptOwnership()": {
					"notice": "Allows an ownership transfer to be completed by the recipient."
				},
				"acceptSubscriptionOwnerTransfer(uint64)": {
					"notice": "Request subscription owner transfer."
				},
				"addConsumer(uint64,address)": {
					"notice": "Add a consumer to a VRF subscription."
				},
				"cancelSubscription(uint64,address)": {
					"notice": "Cancel a subscription"
				},
				"createSubscription()": {
					"notice": "Create a VRF subscription."
				},
				"deregisterProvingKey(uint256[2])": {
					"notice": "Deregisters a proving key to an oracle."
				},
				"getCommitment(uint256)": {
					"notice": "Get request commitment"
				},
				"getRequestConfig()": {
					"notice": "Get configuration relevant for making requests"
				},
				"getSubscription(uint64)": {
					"notice": "Get a VRF subscription."
				},
				"hashOfKey(uint256[2])": {
					"notice": "Returns the proving key hash key associated with this public key"
				},
				"owner()": {
					"notice": "Get the current owner"
				},
				"ownerCancelSubscription(uint64)": {
					"notice": "Owner cancel subscription, sends remaining link directly to the subscription owner."
				},
				"recoverFunds(address)": {
					"notice": "Recover link sent with transfer instead of transferAndCall."
				},
				"registerProvingKey(address,uint256[2])": {
					"notice": "Registers a proving key to an oracle."
				},
				"removeConsumer(uint64,address)": {
					"notice": "Remove a consumer from a VRF subscription."
				},
				"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)": {
					"notice": "Request a set of random words."
				},
				"requestSubscriptionOwnerTransfer(uint64,address)": {
					"notice": "Request subscription owner transfer."
				},
				"setConfig(uint16,uint32,uint32,uint32,int256,(uint32,uint32,uint32,uint32,uint32,uint24,uint24,uint24,uint24))": {
					"notice": "Sets the configuration of the vrfv2 coordinator"
				},
				"transferOwnership(address)": {
					"notice": "Allows an owner to begin transferring ownership to a new address, pending."
				},
				"typeAndVersion()": {
					"notice": "The type and version of this contract"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/VRFCoordinatorV2.sol": "VRFCoordinatorV2"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"ConfirmedOwner.sol": {
			"keccak256": "0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72",
			"license": "MIT",
			"urls": [
				"bzz-raw://af0371c1af45db651823b9a3d5af761b08243c78f105166342eee28de356c8dd",
				"dweb:/ipfs/QmPnC9qNDKwJFd5unwLb9pxjrutoe8MWjm5EXHTxq2kJ4x"
			]
		},
		"ConfirmedOwnerWithProposal.sol": {
			"keccak256": "0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654",
			"license": "MIT",
			"urls": [
				"bzz-raw://a73f185d79d82e6d9baa531d55ffb88c80def1f6187dff93d3df6b2cb5ab7187",
				"dweb:/ipfs/QmVZEePJvcN1KxSTaD5rhKhaMBWHqs6ZeZ5s17Ft6mR5hJ"
			]
		},
		"interfaces/AggregatorV3Interface.sol": {
			"keccak256": "0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c1f59e0c7334c22fb54288728fc32546bdc9c8133d6db0d60223e3c28f52120",
				"dweb:/ipfs/QmeuxawUVBhMWQJXaEhhnubCTc4Jwn5wYK8gbhq6NjrpfG"
			]
		},
		"interfaces/BlockhashStoreInterface.sol": {
			"keccak256": "0x0d39e3be84000b35faa198e8c4fcc1cfd65a876275c776f45b4e0d48c852b4cc",
			"license": "MIT",
			"urls": [
				"bzz-raw://58e6245ee4cdee7fd87ffffb3fefb795accd54a9810015e80bdf619f60e728e2",
				"dweb:/ipfs/Qmei6Pc8kv81ad3MC1oHxsJbHsm32QvcsneDCfZcTJJQrD"
			]
		},
		"interfaces/ERC677ReceiverInterface.sol": {
			"keccak256": "0x80f080ac0c941adf66a664ac01564506ad5c3d125b35743e43e1dc4f6946ef81",
			"license": "MIT",
			"urls": [
				"bzz-raw://b495479786c4034ee3c45b18806ef03737c1a8a49ff240bea7787a9a94ee8c1a",
				"dweb:/ipfs/QmVGn3wiEhD1VLwo7jHUMRvvQmDR6XEuyES6c7xNNMAy4i"
			]
		},
		"interfaces/LinkTokenInterface.sol": {
			"keccak256": "0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5",
			"license": "MIT",
			"urls": [
				"bzz-raw://8cb1064885ecbcd9c3adba779e190cb4a538e5d4d15aeccb67d3376bdffc94bd",
				"dweb:/ipfs/QmcQHK6ewve7tFi4XXK65JthQg4kQzApQikWcURJjGt4iQ"
			]
		},
		"interfaces/OwnableInterface.sol": {
			"keccak256": "0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086",
			"license": "MIT",
			"urls": [
				"bzz-raw://acf7ed6aff47fbddeff1b85e1225a717dfa8bfb3ab89db0e6564346afcf03693",
				"dweb:/ipfs/QmQQn5sKn1ARbt1WhYoHwfTJhK8fbQi8MbDQeHxGXTPbPE"
			]
		},
		"interfaces/TypeAndVersionInterface.sol": {
			"keccak256": "0x805cc9a91d54db1bea60cb19f38364f1eac2735bddb3476294fb803c2f6b7097",
			"license": "MIT",
			"urls": [
				"bzz-raw://05762f3335bb50fde2ece5ffbb735f22db35dc9489ea4716a4e731aa0aeee1e1",
				"dweb:/ipfs/QmNu4sZk9T8PZYMn2BvxECF911hAviCjE2T846Zir8H7RB"
			]
		},
		"interfaces/VRFCoordinatorV2Interface.sol": {
			"keccak256": "0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802",
			"license": "MIT",
			"urls": [
				"bzz-raw://87b4f2ac9fe4e83334c0cc7b070989f133647f20c2b2e8f2224e10d37bebc6df",
				"dweb:/ipfs/QmYS2z7xmTArVpxiNM8Czj1qKL56HMw61Lzdjto9m3B5PL"
			]
		},
		"src/VRF.sol": {
			"keccak256": "0x4ffc551a44e1a78a442bcf6e46abca1e82861fd4cfa7d90ad1ee3453141bc9ab",
			"license": "MIT",
			"urls": [
				"bzz-raw://64d9afaa46f5375369c8ba0cc4dcceb051e083881901ecc22526f4553989f848",
				"dweb:/ipfs/QmbL1fiySZMgDM4CFjNuJMD2rFwLQzjw6mXW4RSbdmFZJQ"
			]
		},
		"src/VRFConsumerBaseV2.sol": {
			"keccak256": "0xd93c5ccd19825efa045d6f74a9cf54840d73ce71bad68a18a5a08fcf5cc85603",
			"license": "MIT",
			"urls": [
				"bzz-raw://ad4330981acfe224fde715ff563927074a0376ff9ec7a5195aed965ea7931823",
				"dweb:/ipfs/QmbSt84jB6jJv838V7KHzbsUSmpeG2fKzK5uSoYdSGrH2j"
			]
		},
		"src/VRFCoordinatorV2.sol": {
			"keccak256": "0xb67f5065a51093b61939e12e4cd3dc197250f18761cd231568da449a1268d1e4",
			"license": "MIT",
			"urls": [
				"bzz-raw://11d87243e97c74386e1db9a9850ccb8e24800b53e3fe5b742e2b27e2078ff985",
				"dweb:/ipfs/QmZUKdKkcM465TuJ3599soP2TKSR7touuWHd7A32YTCDfZ"
			]
		}
	},
	"version": 1
}